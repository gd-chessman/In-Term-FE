import { getTemplate, TemplateData } from './index';

/**
 * T·∫°o HTML cho m·ªôt s·∫£n ph·∫©m v·ªõi template ƒë∆∞·ª£c ch·ªçn
 * @param format - Kh·ªï in (a4, a5, v1, v2, v3)
 * @param data - D·ªØ li·ªáu s·∫£n ph·∫©m
 * @returns HTML string
 */
export const generateProductHTML = (format: string, data: TemplateData): string => {
  const template = getTemplate(format);
  return template(data);
};

/**
 * T·∫°o HTML cho nhi·ªÅu s·∫£n ph·∫©m v·ªõi template ƒë∆∞·ª£c ch·ªçn
 * @param format - Kh·ªï in (a4, a5, v1, v2, v3)
 * @param products - Danh s√°ch d·ªØ li·ªáu s·∫£n ph·∫©m
 * @returns HTML string v·ªõi page breaks
 */
export const generateMultipleProductsHTML = (format: string, products: TemplateData[]): string => {
  const template = getTemplate(format);
  
  return products.map((product, index) => {
    const productHTML = template(product);
    
    // Th√™m page break n·∫øu kh√¥ng ph·∫£i s·∫£n ph·∫©m cu·ªëi c√πng
    if (index < products.length - 1) {
      return productHTML + '<div style="page-break-before: always;"></div>';
    }
    
    return productHTML;
  }).join('');
};

/**
 * Chu·∫©n b·ªã d·ªØ li·ªáu template t·ª´ d·ªØ li·ªáu s·∫£n ph·∫©m
 * @param product - D·ªØ li·ªáu s·∫£n ph·∫©m t·ª´ API
 * @param formatPrice - Function format gi√°
 * @returns TemplateData
 */
export const prepareTemplateData = (
  product: any, 
  formatPrice: (price: number, country: string) => string
): TemplateData => {
  console.log(product)
  return {
    product_name: product.product?.product_name || '',
    product_code: product.product?.product_code || '',
    price: formatPrice(product.product?.price, product.country?.country_name),
    price_sale: formatPrice(product?.ps_price_sale, product.country?.country_name),
    discount_percentage:  product.product?.price && product?.ps_price_sale ? "-" + Math.round(((product.product.price - product.ps_price_sale) / product.product.price) * 100) + '%' : '',
    country_name: product.country?.country_name || '',
    country_code: getCountryFlag(product.country?.country_code),
    print_date: new Date().toLocaleDateString('vi-VN')
  };
};

/**
 * Validate format template
 * @param format - Kh·ªï in
 * @returns boolean
 */
export const isValidTemplateFormat = (format: string): boolean => {
  const validFormats = ['a4', 'a5', 'v1', 'v2', 'v3'];
  return validFormats.includes(format.toLowerCase());
};

/**
 * L·∫•y danh s√°ch c√°c format c√≥ s·∫µn
 * @returns Array of format names
 */
export const getAvailableFormats = (): string[] => {
  return ['a4', 'a5', 'v1', 'v2', 'v3'];
};

/**
 * L·∫•y th√¥ng tin format
 * @param format - Kh·ªï in
 * @returns Object v·ªõi th√¥ng tin format
 */
export const getFormatInfo = (format: string) => {
  const formatInfo: Record<string, { name: string; size: string; description: string }> = {
    a4: { name: 'A4', size: '210√ó297mm', description: 'Kh·ªï gi·∫•y A4 ti√™u chu·∫©n' },
    a5: { name: 'A5', size: '148√ó210mm', description: 'Kh·ªï gi·∫•y A5 nh·ªè g·ªçn' },
    v1: { name: 'V1', size: 'T√πy ch·ªânh', description: 'Kh·ªï t√πy ch·ªânh 1' },
    v2: { name: 'V2', size: 'T√πy ch·ªânh', description: 'Kh·ªï t√πy ch·ªânh 2' },
    v3: { name: 'V3', size: 'T√πy ch·ªânh', description: 'Kh·ªï t√πy ch·ªânh 3' }
  };
  
  return formatInfo[format.toLowerCase()] || formatInfo.a4;
}; 

const getCountryFlag = (countryCode: string) => {
  if (!countryCode || typeof countryCode !== 'string') {
    return "üåç"
  }
  const codePoints = countryCode
    .toUpperCase()
    .split('')
    .map(char => 127397 + char.charCodeAt(0));
  return String.fromCodePoint(...codePoints);
}